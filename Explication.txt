Constantes :

    Pourquoi avoir choisi des constantes ?
        Lisibilité et compréhension améliorées : Les constantes rendent le code plus clair, que ce soit pour le développeur initial ou pour d'autres personnes qui doivent le lire ou le modifier.
        Facilité de maintenance : Les valeurs des constantes sont définies à un seul endroit, ce qui évite de devoir rechercher toutes les occurrences pour les modifier.
        Évite les erreurs : Si une valeur est utilisée à plusieurs endroits et doit être modifiée, une constante garantit que tous les emplacements reflètent le changement, réduisant ainsi les risques d'erreurs.

Variables globales :

    Pourquoi avoir utilisé des variables globales ?
        Partage d'état : Les variables globales permettent de partager l'état du jeu (grille, score, niveau, etc.) entre différentes fonctions sans avoir à les passer en paramètres.
        Simplicité d'accès : Elles simplifient le code en rendant les données essentielles accessibles partout où elles sont nécessaires.
        Adaptées à un jeu : Dans le contexte d'un jeu, les états sont centralisés (exemple : position actuelle, score, gravité), ce qui justifie leur usage.

Formes :

    Utilisation de dictionnaires pour représenter les formes
        Lisibilité et flexibilité : Un dictionnaire permet de regrouper plusieurs propriétés de la forme, comme la matrice (forme), la couleur, et la position.
        Évolutivité : Si on souhaite ajouter une propriété (par exemple, un identifiant unique), cela peut être fait facilement sans modifier la structure existante.

Sauvegarde :

    Pourquoi utiliser le JSON au lieu du TXT ou du Pickle ?
        Support natif : Python gère le JSON avec des outils intégrés comme json.dump et json.load, sans effort supplémentaire pour convertir des structures complexes comme des dictionnaires ou des listes.
        Portabilité : Contrairement au format Pickle, le JSON est portable entre différentes versions de Python.
        Lisibilité : Les fichiers JSON sont lisibles par les humains, bien structurés, et adaptés aux données complexes comme la grille du jeu.
        Éviter les problèmes de compatibilité : Pickle peut poser des problèmes entre différentes versions de Python, ce que l'on souhaite éviter.

    Comment cela fonctionne ?
        On regroupe les variables globales pertinentes (grille, score, niveau, etc.) dans un dictionnaire.
        On sauvegarde ce dictionnaire dans un fichier JSON à l'aide de json.dump.
        Lors du chargement, on utilise json.load pour restaurer les données dans les variables globales.

Pourrissement :

    Fonctionnement :
        Parcourt la grille pour trouver les blocs occupés (non None).
        Sélectionne une position au hasard parmi celles occupées.
        Supprime le bloc en mettant sa valeur à None.
        Dans le menu, une option permet de définir l'intervalle de temps entre chaque suppression.
        Un chronomètre global vérifie quand le temps spécifié est écoulé et déclenche la suppression d'un bloc, avant de réinitialiser le chronomètre.

Variante Polyominos :

    Fonctionnement :
        Lecture d'un fichier texte contenant des polyominos définis à l'aide de caractères +.
        Conversion des + en 1 et des espaces en 0.
        Uniformisation des lignes pour éviter des problèmes de longueur.
        Les polyominos sont ajoutés à la liste des formes disponibles pour le jeu.
        Le reste du programme traite ces nouvelles formes comme les formes standard.

Configuration BONUS :

    Sauvegarde de la configuration :
        Fonctionne de manière similaire à la sauvegarde du jeu.
        Utilise json.dump avec une option d'indentation pour rendre le fichier plus lisible.
    Chargement de la configuration :
        Recharge les constantes modifiables (grille, taille des cases, etc.).
        Recalcule les dimensions de la fenêtre (LARGEUR_ZONE, HAUTEUR_ZONE).
        Redémarre la fenêtre avec les nouvelles dimensions pour éviter des décalages ou des problèmes de collisions.

Utilisation de boucle dans if __name__ == "__main__" :

    Une boucle while True garantit que le jeu retourne au menu principal après avoir terminé une partie ou changé une option.
    Si elle n'était pas utilisée, le programme se fermerait après la première interaction.

Autres variantes non mentionnées précédemment :

    Bloc Bonus :
        Un bloc spécial "gris" apparaît aléatoirement sur la grille.
        Après un certain temps (30 secondes par défaut), le bloc revient à sa couleur originale.
        Si le bloc est éliminé avant, il déclenche un effet aléatoire :
            Augmentation temporaire des points.
            Effacement complet du plateau.
            Gravité réelle appliquée aux blocs.

    Mode 2 joueurs :
        Chaque joueur dispose de sa propre grille et contrôle ses propres blocs.
        Les scores, niveaux, et vitesses sont indépendants pour chaque joueur.
        Une séparation visuelle est dessinée entre les deux grilles.
        Les commandes sont adaptées pour que deux claviers puissent être utilisés simultanément.

    Score par niveau :
        Option activée dans le menu.
        Le score obtenu pour chaque ligne complétée est multiplié par le niveau actuel, rendant les niveaux plus avancés plus gratifiants.

    Changement de vitesse (gravité) :
        La gravité augmente progressivement avec les niveaux.
        Cela rend le jeu plus difficile à mesure que le joueur progresse.
